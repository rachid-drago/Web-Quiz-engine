type: edu
custom_name: stage5
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 1),
            () -> testAllQuizzes(0, 2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 1),


            // Test database save
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpResponse resp = post(url, getPrettyJson(json)).send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(post(url, quizzes[quizNum]), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");;
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = delete(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = auth(delete(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int user) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/AnswerObject.java
  visible: true
  learner_created: true
- name: src/engine/QuizService.java
  visible: true
  learner_created: true
- name: src/engine/IdNotFoundException.java
  visible: true
  text: |
    package engine;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "id not found")
    public class IdNotFoundException extends RuntimeException {
        public IdNotFoundException(String message) {
            super(message);
        }

    }
  learner_created: true
- name: src/engine/QuizRepository.java
  visible: true
  learner_created: true
- name: src/engine/Quizanwser.java
  visible: true
  text: "package engine;\n\nimport java.util.List;\n\npublic class Quizanwser {\n\
    \    private boolean success = false;\n    private String feedback = \"no\";\n\
    \n    public Quizanwser(boolean success, String feedback){\n        this.success\
    \ = success;\n        this.feedback = feedback;\n    }\n    public Quizanwser()\
    \ {}\n\n       \n\n    public boolean isSuccess() {\n        return success;\n\
    \    }\n\n    public void setSuccess(boolean success) {\n        this.success\
    \ = success;\n    }\n\n    public String getFeedback() {\n        return feedback;\n\
    \    }\n\n    public void setFeedback(String feedback) {\n        this.feedback\
    \ = feedback;\n    }\n}\n"
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.List;

    public class Quiz {
        private int id;
        private  String title;
        private  String text;
        private List<String> options;
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private List<Integer> answer;
        private static int counter = 0;
        public Quiz() {this.id = counter++;}

        public List<String> getOptions() {
            return options;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }





        public static boolean isIdThere(int id, List<Quiz> q) {
            for (int i = 0; i < q.size(); i++) {
               if ( q.get(i).getId() == id) return true;
            }
            return false;
        }

        public static int getIndexId(int id, List<Quiz> q) {
            for (int i = 0; i < q.size(); i++) {
                if ( q.get(i).getId() == id) return i;
            }
            return 0;
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        public  int getId() {
            return id;
        }

        public  void setId(int id) {
            this.id = id;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

    }
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  text: |+
    package engine;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.concurrent.atomic.AtomicLong;



    @RestController

    public class QuizController {

            private String[] option = new String[] {"Robot","Tea leaf","Cup of coffee","Bug"};
            private String[] option2 = new String[] {"1+3", "2+2", "8-1", "1+5"};
            private static List<Quiz> list = new ArrayList<>();


            @GetMapping(path = "/api/quizzes/{id}")
            public Quiz Quiz(@PathVariable int id) {
                    if (Quiz.isIdThere(id,list) == false) {throw new IdNotFoundException("quiz not found");}
                   // try {Quiz.isIdThere(id,list) ;}catch(Exception e) {throw new IdNotFoundException("quiz not found");}
                    else return list.get(Quiz.getIndexId(id,list));


            }
            @GetMapping(path = "/api/quizzes")
            public List<Quiz> Quiz() {
                return list;
            }

            @PostMapping(value = "/api/quizzes", consumes = "application/json")
            public Quiz quiz(@RequestBody Quiz quiz) {
                if (quiz.getAnswer() == null) quiz.setAnswer(new ArrayList<Integer>());
                if ("".equals(quiz.getText()) || "".equals(quiz.getTitle()) || quiz.getOptions() == null) {
                    throw new ResponseStatusException(
                            HttpStatus.BAD_REQUEST, "entity not found");
                } else list.add(quiz);
                return quiz;
            }

            @PostMapping(path = "/api/quizzes/{id}/solve")
            public Quizanwser quiz(@RequestBody AnswerList answer, @PathVariable int id) {
                Quizanwser q = new Quizanwser();
                try {
                    list.get(Quiz.getIndexId(id,list)).getAnswer();

                } catch (Exception e) {

                    List<Integer> l = new ArrayList<>();
                    list.get(Quiz.getIndexId(id,list)).setAnswer(l);
                    String s = list.get(Quiz.getIndexId(id,list)).getAnswer().toString();
                    // String e = answer.getAnswer().toString();
                    if (answer.getAnswer().equals(list.get(Quiz.getIndexId(id,list)).getAnswer()) ) {


                         q = new Quizanwser(true,"Congratulations, you're right! try catch " + s);
                    }
                    else {

                         q = new Quizanwser(false,"Wrong answer! Please, try again. try catch " + s);
                    }
                }
                if (answer.getAnswer().equals(list.get(Quiz.getIndexId(id,list)).getAnswer()) ) {


                    q = new Quizanwser(true,"Congratulations, you're right! ");
                }
                else {

                    q = new Quizanwser(false,"Wrong answer! Please, try again. ");
                }
                return q;

            }

    }

  learner_created: true
- name: src/engine/QuizServiceImpl.java
  visible: true
  learner_created: true
- name: src/engine/user/User.java
  visible: true
  learner_created: true
- name: src/engine/user/UserRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/508/implement
status: Failed
feedback:
  message: "Exception in test #1\n\nCannot start Spring application\nMake sure that\
    \ no other Spring application is running at the moment.\n\norg.springframework.boot.web.server.PortInUseException:\
    \ Port 8889 is already in use\r\n\tat org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:213)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:297)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:163)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)\r\
    \n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)\r\
    \n\tat engine.WebQuizEngine.main(WebQuizEngine.java:13)\n\nPlease find below the\
    \ output of your program during this failed test.\n\n---\n\n\n  .   ____     \
    \     _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n\
    ( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)|\
    \ | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n\
    \ =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.2.2.RELEASE)\n\
    \n2020-10-10 15:49:12.530  INFO 8756 --- [    Test worker] engine.WebQuizEngine\
    \                     : Starting WebQuizEngine on DESKTOP-RLVR7GP with PID 8756\
    \ (started by Rachid-pc in C:\\Users\\Rachid-pc\\IdeaProjects\\Web Quiz Engine\\\
    Web Quiz Engine\\task)\n2020-10-10 15:49:12.534  INFO 8756 --- [    Test worker]\
    \ engine.WebQuizEngine                     : No active profile set, falling back\
    \ to default profiles: default\n2020-10-10 15:49:13.807  INFO 8756 --- [    Test\
    \ worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data\
    \ JPA repositories in DEFAULT mode.\n2020-10-10 15:49:13.901  INFO 8756 --- [\
    \    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data\
    \ repository scanning in 83ms. Found 2 JPA repository interfaces.\n2020-10-10\
    \ 15:49:14.453  INFO 8756 --- [    Test worker] trationDelegate$BeanPostProcessorChecker\
    \ : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39;\
    \ of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration]\
    \ is not eligible for getting processed by all BeanPostProcessors (for example:\
    \ not eligible for auto-proxying)\n2020-10-10 15:49:14.816  INFO 8756 --- [  \
    \  Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized\
    \ with port(s): 8889 (http)\n2020-10-10 15:49:14.830  INFO 8756 --- [    Test\
    \ worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n\
    2020-10-10 15:49:14.830  INFO 8756 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.29]\n2020-10-10 15:49:15.019\
    \  INFO 8756 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2020-10-10 15:49:15.019\
    \  INFO 8756 --- [    Test worker] o.s.web.context.ContextLoader            :\
    \ Root WebApplicationContext: initialization completed in 2407 ms\n2020-10-10\
    \ 15:49:15.217  INFO 8756 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2020-10-10 15:49:15.523  INFO 8756 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start\
    \ completed.\n2020-10-10 15:49:15.534  INFO 8756 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../quizdb&#39;\n\
    2020-10-10 15:49:15.912  INFO 8756 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2020-10-10 15:49:16.041\
    \  INFO 8756 --- [    Test worker] org.hibernate.Version                    :\
    \ HHH000412: Hibernate Core {5.4.9.Final}\n2020-10-10 15:49:16.265  INFO 8756\
    \ --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001:\
    \ Hibernate Commons Annotations {5.1.0.Final}\n2020-10-10 15:49:16.438  INFO 8756\
    \ --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400:\
    \ Using dialect: org.hibernate.dialect.H2Dialect\n2020-10-10 15:49:17.443  INFO\
    \ 8756 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490:\
    \ Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2020-10-10 15:49:17.454  INFO 8756 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2020-10-10 15:49:17.820  WARN 8756 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration\
    \ : spring.jpa.open-in-view is enabled by default. Therefore, database queries\
    \ may be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2020-10-10 15:49:18.133  INFO 8756 --- [    Test worker]\
    \ o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n\
    2020-10-10 15:49:18.617  INFO 8756 --- [    Test worker] .s.s.UserDetailsServiceAutoConfiguration\
    \ : \n\nUsing generated security password: 28b9e00b-2428-4853-8cc9-905800dae8d9\n\
    \n2020-10-10 15:49:18.745  INFO 8756 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2cb27ce9,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@3444d6e6,\
    \ org.springframework.security.web.header.HeaderWriterFilter@3fdb4f24, org.springframework.security.web.csrf.CsrfFilter@e7ab584,\
    \ org.springframework.security.web.authentication.logout.LogoutFilter@257a0c34,\
    \ org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@65e0dfed,\
    \ org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@a4f159a,\
    \ org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@205547f1,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@409f3e4e,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@31ec414d,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@69225101,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@77a7c67f,\
    \ org.springframework.security.web.session.SessionManagementFilter@1cd1a9d9, org.springframework.security.web.access.ExceptionTranslationFilter@5ab26a42,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@44071b3b]\n\
    2020-10-10 15:49:18.781  INFO 8756 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2020-10-10\
    \ 15:49:18.824  INFO 8756 --- [    Test worker] o.apache.catalina.core.StandardService\
    \   : Stopping service [Tomcat]\n2020-10-10 15:49:18.837  WARN 8756 --- [    Test\
    \ worker] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT]\
    \ appears to have started a thread named [MVStore background writer nio:C:/Users/Rachid-pc/IdeaProjects/Web\
    \ Quiz Engine/Web Quiz Engine/quizdb.mv.db] but has failed to stop it. This is\
    \ very likely to create a memory leak. Stack trace of thread:\n java.base@11.0.7/java.lang.Object.wait(Native\
    \ Method)\n app//org.h2.mvstore.MVStore$BackgroundWriterThread.run(MVStore.java:3283)\n\
    2020-10-10 15:49:18.838  WARN 8756 --- [    Test worker] o.a.c.loader.WebappClassLoaderBase\
    \       : The web application [ROOT] appears to have started a thread named [HikariPool-1\
    \ housekeeper] but has failed to stop it. This is very likely to create a memory\
    \ leak. Stack trace of thread:\n java.base@11.0.7/jdk.internal.misc.Unsafe.park(Native\
    \ Method)\n java.base@11.0.7/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:234)\n\
    \ java.base@11.0.7/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2123)\n\
    \ java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)\n\
    \ java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1054)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1114)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \ java.base@11.0.7/java.lang.Thread.run(Thread.java:834)\n2020-10-10 15:49:18.840\
    \  WARN 8756 --- [    Test worker] o.a.c.loader.WebappClassLoaderBase       :\
    \ The web application [ROOT] appears to have started a thread named [HikariPool-1\
    \ connection adder] but has failed to stop it. This is very likely to create a\
    \ memory leak. Stack trace of thread:\n java.base@11.0.7/jdk.internal.misc.Unsafe.park(Native\
    \ Method)\n java.base@11.0.7/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:234)\n\
    \ java.base@11.0.7/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2123)\n\
    \ java.base@11.0.7/java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:458)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1053)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1114)\n\
    \ java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \ java.base@11.0.7/java.lang.Thread.run(Thread.java:834)\n2020-10-10 15:49:18.848\
    \  INFO 8756 --- [    Test worker] ConditionEvaluationReportLoggingListener :\
    \ \n\nError starting ApplicationContext. To display the conditions report re-run\
    \ your application with &#39;debug&#39; enabled.\n2020-10-10 15:49:18.851 ERROR\
    \ 8756 --- [    Test worker] o.s.b.d.LoggingFailureAnalysisReporter   : \n\n***************************\n\
    APPLICATION FAILED TO START\n***************************\n\nDescription:\n\nWeb\
    \ server failed to start. Port 8889 was already in use.\n\nAction:\n\nIdentify\
    \ and stop the process that&#39;s listening on port 8889 or configure this application\
    \ to listen on another port.\n\n2020-10-10 15:49:18.856  INFO 8756 --- [    Test\
    \ worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService\
    \ &#39;applicationTaskExecutor&#39;\n2020-10-10 15:49:18.857  INFO 8756 --- [\
    \    Test worker] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory\
    \ for persistence unit &#39;default&#39;\n2020-10-10 15:49:18.860  INFO 8756 ---\
    \ [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 -\
    \ Shutdown initiated...\n2020-10-10 15:49:18.875  INFO 8756 --- [    Test worker]\
    \ com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed."
  time: Sat, 10 Oct 2020 14:49:19 UTC
record: -1
